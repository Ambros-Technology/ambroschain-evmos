// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: evmos/feedistr/v1/feedistr.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Distribution defines the fee distribution percentages for block proposer and contract rewards
type Distribution struct {
	// block proposer reward percentage
	ProposerReward github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=proposer_reward,json=proposerReward,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"proposer_reward"`
	// contract reward percentage
	ContractRewards github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=contract_rewards,json=contractRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"contract_rewards"`
}

func (m *Distribution) Reset()         { *m = Distribution{} }
func (m *Distribution) String() string { return proto.CompactTextString(m) }
func (*Distribution) ProtoMessage()    {}
func (*Distribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_e12a3957ba6fd59a, []int{0}
}
func (m *Distribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Distribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Distribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Distribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Distribution.Merge(m, src)
}
func (m *Distribution) XXX_Size() int {
	return m.Size()
}
func (m *Distribution) XXX_DiscardUnknown() {
	xxx_messageInfo_Distribution.DiscardUnknown(m)
}

var xxx_messageInfo_Distribution proto.InternalMessageInfo

// ContractWithdrawAddress
type ContractWithdrawAddress struct {
	// contract hex address registered on the fee distribution module
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// hex address from the registered owner/withdrawal address
	WithdrawalAddress string `protobuf:"bytes,2,opt,name=withdrawal_address,json=withdrawalAddress,proto3" json:"withdrawal_address,omitempty"`
}

func (m *ContractWithdrawAddress) Reset()         { *m = ContractWithdrawAddress{} }
func (m *ContractWithdrawAddress) String() string { return proto.CompactTextString(m) }
func (*ContractWithdrawAddress) ProtoMessage()    {}
func (*ContractWithdrawAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_e12a3957ba6fd59a, []int{1}
}
func (m *ContractWithdrawAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractWithdrawAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractWithdrawAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractWithdrawAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractWithdrawAddress.Merge(m, src)
}
func (m *ContractWithdrawAddress) XXX_Size() int {
	return m.Size()
}
func (m *ContractWithdrawAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractWithdrawAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ContractWithdrawAddress proto.InternalMessageInfo

func (m *ContractWithdrawAddress) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ContractWithdrawAddress) GetWithdrawalAddress() string {
	if m != nil {
		return m.WithdrawalAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*Distribution)(nil), "evmos.feedistr.v1.Distribution")
	proto.RegisterType((*ContractWithdrawAddress)(nil), "evmos.feedistr.v1.ContractWithdrawAddress")
}

func init() { proto.RegisterFile("evmos/feedistr/v1/feedistr.proto", fileDescriptor_e12a3957ba6fd59a) }

var fileDescriptor_e12a3957ba6fd59a = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0x87, 0x63, 0x06, 0x24, 0x2c, 0x44, 0x69, 0x84, 0x44, 0xc5, 0xe0, 0x56, 0x1d, 0x10, 0x1d,
	0x1a, 0xab, 0xe2, 0x09, 0x68, 0xfb, 0x04, 0x5d, 0x2a, 0x58, 0x90, 0x1b, 0x9b, 0xc4, 0x82, 0xd6,
	0x91, 0xcf, 0x4d, 0xe0, 0x2d, 0x78, 0x26, 0xa6, 0x8e, 0x1d, 0x11, 0x43, 0x85, 0x92, 0x17, 0x41,
	0xb1, 0xf3, 0xa7, 0x33, 0x53, 0x4e, 0x77, 0x5f, 0x3e, 0xdf, 0xe9, 0x87, 0x07, 0x22, 0x5d, 0x2b,
	0xa0, 0x2f, 0x42, 0x70, 0x09, 0x46, 0xd3, 0x74, 0xd2, 0xd4, 0x41, 0xa2, 0x95, 0x51, 0x7e, 0xd7,
	0x12, 0x41, 0xd3, 0x4d, 0x27, 0x37, 0x57, 0x91, 0x8a, 0x94, 0x9d, 0xd2, 0xb2, 0x72, 0xe0, 0xf0,
	0x0b, 0xe1, 0xf3, 0x79, 0x89, 0xc8, 0xd5, 0xd6, 0x48, 0xb5, 0xf1, 0x97, 0xb8, 0x93, 0x68, 0x95,
	0x28, 0x10, 0xfa, 0x59, 0x8b, 0x8c, 0x69, 0xde, 0x43, 0x03, 0x74, 0x77, 0x36, 0x0d, 0x76, 0x87,
	0xbe, 0xf7, 0x73, 0xe8, 0xdf, 0x46, 0xd2, 0xc4, 0xdb, 0x55, 0x10, 0xaa, 0x35, 0x0d, 0x15, 0x94,
	0x8b, 0xb8, 0xcf, 0x18, 0xf8, 0x2b, 0x35, 0x1f, 0x89, 0x80, 0x60, 0x2e, 0xc2, 0xc5, 0x45, 0xad,
	0x59, 0x58, 0x8b, 0xff, 0x88, 0x2f, 0x43, 0xb5, 0x31, 0x9a, 0x85, 0xa6, 0x12, 0x43, 0xef, 0xe4,
	0x5f, 0xe6, 0x4e, 0xed, 0x71, 0x66, 0x18, 0x02, 0xbe, 0x9e, 0x55, 0xad, 0xa5, 0x34, 0x31, 0xd7,
	0x2c, 0x7b, 0xe0, 0x5c, 0x0b, 0x00, 0x7f, 0x74, 0xf4, 0x2a, 0x73, 0x3d, 0x77, 0x4f, 0x6b, 0xa9,
	0xd1, 0x31, 0xf6, 0xb3, 0xea, 0x6f, 0xf6, 0xd6, 0xc0, 0x76, 0xc5, 0x45, 0xb7, 0x9d, 0x54, 0xf8,
	0x74, 0xb6, 0xcb, 0x09, 0xda, 0xe7, 0x04, 0xfd, 0xe6, 0x04, 0x7d, 0x16, 0xc4, 0xdb, 0x17, 0xc4,
	0xfb, 0x2e, 0x88, 0xf7, 0x34, 0x3a, 0xba, 0xc3, 0xc4, 0x4c, 0x83, 0x04, 0xea, 0x12, 0x7b, 0x6f,
	0x33, 0xb3, 0xe7, 0xac, 0x4e, 0x6d, 0x0a, 0xf7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x73,
	0x0f, 0xe1, 0xd2, 0x01, 0x00, 0x00,
}

func (m *Distribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Distribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Distribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ContractRewards.Size()
		i -= size
		if _, err := m.ContractRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFeedistr(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ProposerReward.Size()
		i -= size
		if _, err := m.ProposerReward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFeedistr(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ContractWithdrawAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractWithdrawAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractWithdrawAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawalAddress) > 0 {
		i -= len(m.WithdrawalAddress)
		copy(dAtA[i:], m.WithdrawalAddress)
		i = encodeVarintFeedistr(dAtA, i, uint64(len(m.WithdrawalAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintFeedistr(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeedistr(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeedistr(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Distribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposerReward.Size()
	n += 1 + l + sovFeedistr(uint64(l))
	l = m.ContractRewards.Size()
	n += 1 + l + sovFeedistr(uint64(l))
	return n
}

func (m *ContractWithdrawAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovFeedistr(uint64(l))
	}
	l = len(m.WithdrawalAddress)
	if l > 0 {
		n += 1 + l + sovFeedistr(uint64(l))
	}
	return n
}

func sovFeedistr(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeedistr(x uint64) (n int) {
	return sovFeedistr(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Distribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeedistr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Distribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Distribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedistr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeedistr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeedistr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposerReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedistr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeedistr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeedistr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeedistr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeedistr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractWithdrawAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeedistr
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractWithdrawAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractWithdrawAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedistr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeedistr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeedistr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeedistr
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeedistr
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeedistr
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeedistr(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeedistr
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeedistr(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeedistr
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeedistr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeedistr
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeedistr
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeedistr
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeedistr
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeedistr        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeedistr          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeedistr = fmt.Errorf("proto: unexpected end of group")
)
