syntax = "proto3";

package evmos.fees.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/tharsis/evmos/x/fees/types";

// Msg defines the intrarelayer Msg service.
service Msg {
  // RegisterContract registers the contract on the fee distribution module in order for the owner
  // to recieve txs fees.
  rpc RegisterContract(MsgRegisterContract) returns (MsgRegisterContractResponse){
    option (google.api.http).get = "/evmos/distribution/v1/tx/register_contract";
  };
  // UpdateWithdawAddress updates the withdrawal address for the contract that has been 
  rpc UpdateWithdawAddress(MsgUpdateWithdawAddress) returns (MsgUpdateWithdawAddressResponse){
    option (google.api.http).get = "/evmos/distribution/v1/tx/update_withdraw_address";
  };
}

// MsgRegisterContract defines a Msg to register a contract deployer to receive
// tx fees.
message MsgRegisterContract {
  // contract hex address
  string contract_address = 1;
  // nonce (sequence) number that generates the contract address
  uint64 nonce = 2;
  // contract deployer hex address
  string deployer_address = 3;
}

// MsgRegisterContractResponse returns no fields
message MsgRegisterContractResponse{}


// MsgUpdateWithdawAddress defines a Msg to update the withdraw address to which
// tx fees will be allocated.
message MsgUpdateWithdawAddress {
  // contract hex address registered on the fee distribution module
  string contract_address = 1;
  // new hex address to receive tx fees.
  string new_withdraw_address = 2;
  // hex address from the registered owner/withdrawal address
  string withdraw_address = 3;
}

// MsgUpdateWithdawAddressResponse returns no fields
message MsgUpdateWithdawAddressResponse{}
